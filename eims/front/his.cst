<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Property Name="NatureTable" Type="DataTable" Optional="True"%>
<%@ Property Name="ServiceName" Type="System.String" Optional="True"%>
<%@ Property Name="ActionMapping" Type="System.String" Optional="True"%>
<%@ Property Name="MenuCode" Type="System.String" Optional="True"%>


<script runat="template">
// My methods here.
public String ConvertTableCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = true;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            if (!int.TryParse(ch.ToString(), out parse)) {
                builder.Append(ch.ToString());
            }
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}
public String ConvertColumnCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = false;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            builder.Append(ch.ToString());
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}

public string ConvertColumnType(DbType type) {
    string typeName = "String";
    switch (type) {
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.Boolean:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
        case DbType.SByte:
            typeName = "Integer";
            break;
        case DbType.String:
            typeName = "String";
            break;
        case DbType.DateTime:
        case DbType.Date:
            typeName = "Date";
            break;
        case DbType.Decimal:
            typeName = "BigDecimal";
            break;
    }
    return typeName;
}

public string buildClassName(string name, string ext) {
    return ConvertTableCamel(name) + ext;
}

public string buildMethodName(string name, string ext) {
    return ConvertColumnCamel(name) + ext;
}

public string GetControlType(int type) {
    string result = "input";
    switch (type) {
        case 2:
            result = "date";
            break;
        case 3:
            result = "select";
            break;
        default:
            break;
    }
    return result;
}
</script>
<%
    Dictionary<string, string> dataDic = new Dictionary<string, string>();
    DataRow[] dataDicRows = NatureTable.Select("data_dic_code is not null and data_dic_code<>''");
    foreach (DataRow mappingRow in dataDicRows) {
        if (!dataDic.ContainsKey(mappingRow["data_dic_code"].ToString())) {
            dataDic[mappingRow["data_dic_code"].ToString()] = mappingRow["data_dic_code"].ToString();
        }
    }

%>
<template>
<div class="client-manager-box">
<el-dialog title="<%=ServiceName%>" :visible.sync="dialogFormVisible" :modal-append-to-body='false' distroy-on-close='true'>
    <commonTable
      :columns="columns"
      :data="tableData"
      :pager="page"
      :paginationBoxReflow="paginationBoxReflow"
      :total="page.total"
      :showCheck="True"
      @handleSizeChange="handleSizeChange"
      @handleCurrentChange="handleCurrentChange"
    >
        <el-table-column
        slot="table_oper"
        align="center"
        label="操作"
        width="160"
        :resizable="false"
      >
      </el-table-column>
    </commonTable>
</el-dialog>
</div>
</template>
<script>
import commonTable from '@/components/commonTable/commonTable'
import commonSearch from '@/components/commonSearch/commonSearch'
import api from "@/api/<%=MenuCode%>.js"
<%DataRow[] displayRows = NatureTable.Select("arg_type=2 and display=1", "sort"); %>
export default {
    name: "<%=NatureTable.TableName%>",
    components: {
        commonTable,
        commonSearch,
    },
    props: {
    },
    data() {
        return {
            columns: [
            ],
            tableData: [
            ],
            fullServiceInfo: {
            },
            page: {
                page: 1,//当前页
                pageSize: 10,//当前显示页数
                sizes: [10, 20, 30, 40],//分页条数设置
                total: 0//总页数
              },//表格中的分页
            paginationBoxReflow: true,
        }
    },
    mounted() {
        this.init();
        this.list();
    },
    methods: {
        list() {
            this.innerList(1);
        },
        refresh() {
            this.innerList(this.page.page);
        },
        innerList(currentPage) {
            this.page.page = currentPage;
            api.<%=buildMethodName(NatureTable.TableName, ActionMapping) %>({...this.queryModel}).then(t=>{
                if (t.code != 200) {
                    return;
                }
                this.tableData = t.data;
            });
            
        },
        handleSizeChange(pageSize) {
            this.page.pageSize = pageSize;
            this.list();
        },
        handleCurrentChange(index) {
            this.innerList(index);
        },
        show(row) {
            this.model = row;
            this.list();
            this.dialogFormVisible = true;
        },
        close() {
            this.dialogFormVisible = false;
        },
        init() {
            service.getFullServiceInfo({serviceCode: '<%=NatureTable.TableName%>', actionMapping: '<%=ActionMapping%>'}).then(t=> {
                if (t.code != 200) {
                    return;
                }
                this.fullServiceInfo = t.data;
                this.columns = service.genColumns(this.fullServiceInfo);
            });
        },
    },
};
</script>

<style lang="scss" scoped>
.client-manager-box {
  .operationBtn {
    .operationBtn_span {
      margin-right: 10px;
      color: rgb(64, 158, 255);
    }
  }
}
</style>

