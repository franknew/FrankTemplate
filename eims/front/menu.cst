<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="MenuTable" Type="DataTable" Optional="True"%>

<script runat="template">
// My methods here.
public String ConvertTableCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = true;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            if (!int.TryParse(ch.ToString(), out parse)) {
                builder.Append(ch.ToString());
            }
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}
public String ConvertColumnCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = false;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            builder.Append(ch.ToString());
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}

public string ConvertColumnType(DbType type) {
    string typeName = "String";
    switch (type) {
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.Boolean:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
        case DbType.SByte:
            typeName = "Integer";
            break;
        case DbType.String:
            typeName = "String";
            break;
        case DbType.DateTime:
        case DbType.Date:
            typeName = "Date";
            break;
        case DbType.Decimal:
            typeName = "BigDecimal";
            break;
    }
    return typeName;
}

public string buildClassName(string name, string ext) {
    return ConvertTableCamel(name) + ext;
}

public string buildMethodName(string name, string ext) {
    return ConvertColumnCamel(name) + ext;
}
</script>
import Vue from 'vue'
import Router from 'vue-router'

Vue.use(Router)

/* Layout */
import Layout from '@/layout'

export const routesMap = {
  // 固定路由
  redirect: () => import('@/views/redirect/index'),
  Layout: () => import('@/layout'),
  login: () => import('@/views/login/index'),
  authRedirect: () => import('@/views/login/auth-redirect'),
  workBench: () => import('@/views/workBench/workBench'),
  404: () => import('@/views/error-page/404'),
  401: () => import('@/views/error-page/401'),
  <%foreach (DataRow row in MenuTable.Rows) {%>
  <%    string menuCode = row["menu_code"].ToString();
        string menuName = row["menu_name"].ToString();
      %>
  <%=menuCode %>: ()=> import('@/views/list/<%=menuCode %>'),
  <%}%>
}
/**
 * constantRoutes
 * a base page that does not have permission requirements
 * all roles can be accessed
 */
export const constantRoutes = [
    {
    path: '/redirect',
    component: Layout,
    hidden: true,
    children: [
      {
        path: '/redirect/:path(.*)',
        component: routesMap['redirect']
      }
    ]
  },
  {
    path: '/login',
    component: routesMap['login'],
    hidden: true
  },
  {
    path: '/auth-redirect',
    component: routesMap['authRedirect'],
    hidden: true
  },
  {
    path: '/404',
    component: routesMap['404'],
    hidden: true
  },
  {
    path: '/401',
    component: routesMap['401'],
    hidden: true
  },
  {
    path: '/',
    component: Layout,
    redirect: '/workBench',
    children: [
      {
        path: 'workBench',
        component: routesMap['workBench'],
        canClick: true,
        name: 'workBench',
        meta: { title: '工作台', icon: 'documentation', affix: true }
      }
    ]
  },
  {
    path: '/baseData',
    component: Layout,
    redirect: '/baseData/clientManage',
    meta: { title: '基础数据', icon: 'documentation' },
    popper: true,
    children: [
    <% foreach (DataRow row in MenuTable.Rows) {
        string menuCode = row["menu_code"].ToString();
        string menuName = row["menu_name"].ToString();
    %>
      {
        path: '/baseData/<%=menuCode%>',
        component: routesMap['<%=menuCode%>'],
        name: '<%=menuCode%>',
        meta: { title: '<%=menuName%>', activeMenu: '/baseData' }
      },
    <%}%>
  }
]

export const asyncRoutes = []

const createRouter = () => new Router({
  mode: 'history', // require service support
  scrollBehavior: () => ({ y: 0 }),
  routes: constantRoutes
})

const router = createRouter()

// Detail see: https://github.com/vuejs/vue-router/issues/1234#issuecomment-357941465
export function resetRouter() {
  const newRouter = createRouter()
  router.matcher = newRouter.matcher // reset router
}

export default router
