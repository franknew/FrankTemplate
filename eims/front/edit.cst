<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="NatureTable" Type="DataTable" Optional="True"%>
<%@ Property Name="ServiceCode" Type="System.String" %>
<%@ Property Name="ServiceName" Type="System.String" %>
<%@ Property Name="ActionMapping" Type="System.String" %>
<%@ Property Name="MenuCode" Type="System.String" %>
<%@ Property Name="MenuId" Type="Int32" %>

<script runat="template">
// My methods here.
public String ConvertTableCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = true;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            if (!int.TryParse(ch.ToString(), out parse)) {
                builder.Append(ch.ToString());
            }
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}
public String ConvertColumnCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = false;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            builder.Append(ch.ToString());
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}

public string ConvertColumnType(DbType type) {
    string typeName = "String";
    switch (type) {
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.Boolean:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
        case DbType.SByte:
            typeName = "Integer";
            break;
        case DbType.String:
            typeName = "String";
            break;
        case DbType.DateTime:
        case DbType.Date:
            typeName = "Date";
            break;
        case DbType.Decimal:
            typeName = "BigDecimal";
            break;
    }
    return typeName;
}

public string buildClassName(string name, string ext) {
    return ConvertTableCamel(name) + ext;
}

public string buildMethodName(string name, string ext) {
    return ConvertColumnCamel(name) + ext;
}
</script>
<%
    DataRow[] displayRows = NatureTable.Select("arg_type=1 and display=1");
    DataRow[] allRows = NatureTable.Select("arg_type=1");
    DataRow[] dataDicRows = NatureTable.Select("data_dic_code is not null and data_dic_code<>''");

%>
<template>
<el-dialog title="<%=ServiceName%>" :visible.sync="dialogFormVisible" :modal-append-to-body='false'>
  <comForm
      v-if='dialogFormVisible'
      ref="formRef"
      :data="modelCopy"
      :field-list="fieldList"
      :list-type-info="listTypeInfo"
      :catalogProductFlag="false"
      :exportBtnFlag="false"
      :remote="true"
      class="creditRecordSearchBar"
    >
        <el-button type="primary" @click="save">保存</el-button>
        <el-button @click="close">关闭</el-button>
    </comForm>
</el-dialog>
</template>

<script>
import api from "@/api/<%=MenuCode%>.js"
import service from "@/api/pc_service.js"
import dataDicApi from "@/api/datadic.js"
import comForm from '@/components/comForm/comForm'
export default {
    name: "<%=ServiceCode%>_edit",
    components: {
        comForm
    },
    props: {
        <%foreach (DataRow row in dataDicRows) {%>
        <%=row["data_dic_code"].ToString() %>: Array,
        <%} %>
    },
    data() {
        return {
            model: {
            },
            modelCopy: {
            },
            fieldList: [
            ],
            listTypeInfo: [
            ],
            fullServiceInfo: {
            },
            dialogFormVisible: false,
            count: 2,
            width: {
              labelWidth: 110,
              itemWidth: 220
            },
        }
    },
    mounted() {
        this.init();
    },
    methods: {
        close() {
            this.dialogFormVisible = false;
        },
        show(data) {
            this.modelCopy = JSON.parse(JSON.stringify(data));
            this.model = data;
            this.dialogFormVisible = true;
        },
        save() {
            this.modelCopy = this.$refs.formRef.defaultData;
            api.<%=buildMethodName(ServiceCode, ActionMapping) %>(this.modelCopy).then(t=> {
                if (t.code != 200) {
                    return;
                }
                this.model = JSON.parse(JSON.stringify(this.modelCopy));
                this.$message('保存成功！');
                this.$emit("onRefresh");
                this.close();
            });
        },
        init() {
            service.getFullServiceInfo({serviceCode: '<%=ServiceCode%>', actionMapping: '<%=ActionMapping%>', menuId: <%=MenuId%>}).then(t=> {
                if (t.code != 200) {
                    return;
                }
                this.fullServiceInfo = t.data;
                this.fieldList = service.genQueryModel(this.fullServiceInfo);
                this.model = service.getModel(this.fullServiceInfo.displayInputNatures);
            });
            this.listTypeInfo = dataDicApi.getAll();
        },
    }
}

</script>