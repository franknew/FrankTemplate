<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="NatureTable" Type="DataTable" Optional="True"%>
<%@ Property Name="NameSpace" Type="System.String" Default="com.xcd.eims" %>
<%@ Property Name="ServiceCode" Type="System.String" %>
<%@ Property Name="Mapping" Type="System.String" %>

<script runat="template">
// My methods here.
public String ConvertTableCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = true;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            if (!int.TryParse(ch.ToString(), out parse)) {
                builder.Append(ch.ToString());
            }
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}
public String ConvertColumnCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    if (tableName.StartsWith("p_")) {
        tableName = tableName.TrimStart('p','_').TrimEnd('_');
    }
    if (tableName.Equals("long")) {
        return "Long";
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = false;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            builder.Append(ch.ToString());
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}

public string ConvertColumnType(DbType type) {
    string typeName = "String";
    switch (type) {
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.Boolean:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
        case DbType.SByte:
            typeName = "Integer";
            break;
        case DbType.String:
            typeName = "String";
            break;
        case DbType.DateTime:
        case DbType.Date:
            typeName = "Date";
            break;
        case DbType.Decimal:
            typeName = "BigDecimal";
            break;
    }
    return typeName;
}

public string buildClassName(string name, string ext) {
    return ConvertTableCamel(name) + ext;
}

public string buildMethodName(string name, string ext) {
    return ConvertColumnCamel(name) + ext;
}
</script>
package <%=NameSpace%>.reqeust;
import io.swagger.annotations.ApiModelProperty;
import java.math.BigDecimal;

import lombok.Data;

@Data
public class <%= buildClassName(ServiceCode,Mapping).Trim()%>Request {
    <% 
    DataRow[] natureRows = NatureTable.Select("arg_type=1");
    foreach (DataRow row in natureRows) {
        int? fieldType = row["field_type"] as int?;
        String natureName = row["nature_name"].ToString();
        String natureCode = row["nature_code"]?.ToString();%>  
    /**
    ** <%=natureName %>
    **/
    @ApiModelProperty(value = "<%=natureName.Trim() %>")
        <%switch (fieldType) {
            case 100:
            case 3:%>
    Integer <%=ConvertColumnCamel(natureCode) %> = 0;
                <%break;
            case 101:%>
    BigDecimal <%=ConvertColumnCamel(natureCode) %> = new BigDecimal("0");
                <%break;
            default:%>
    String <%=ConvertColumnCamel(natureCode) %> = "";
                <%break;
        }%>
    <%}%>
}