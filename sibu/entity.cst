
<%@ Template Language="C#" TargetLanguage="Java" Encoding="UTF-8" ResponseEncoding="UTF-8"%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer"%>
<%@ Import Namespace="System.Text" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Optional="True"%>
<%@ Property Name="NameSpace" Type="System.String" Default="com.sibu.mall.accountant" %>

<script runat="template">
// My methods here.
public String ConvertTableCamel(String tableName) {
    if (tableName.StartsWith("t_")) {
        tableName = tableName.TrimStart('t','_').TrimEnd('_');
    }
    StringBuilder builder = new StringBuilder();
    bool needUpper = true;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            if (!int.TryParse(ch.ToString(), out parse)) {
                builder.Append(ch.ToString());
            }
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}
public String ConvertColumnCamel(String tableName) {
    StringBuilder builder = new StringBuilder();
    bool needUpper = false;
    int i = 0;
    foreach (char ch in tableName) {
        if (i == tableName.Length - 1) {
            int parse = -1;
            builder.Append(ch.ToString());
        } 
        else if (needUpper) {
            builder.Append(ch.ToString().ToUpper());
            needUpper = false;
        }
        else if (ch.Equals('_')) {
            needUpper = true;
        } else {
            builder.Append(ch.ToString());
        }
        i++;
    }
    return builder.ToString();
}

public string ConvertColumnType(DbType type) {
    string typeName = "String";
    switch (type) {
        case DbType.Int16:
        case DbType.Int32:
        case DbType.Int64:
        case DbType.Boolean:
        case DbType.UInt16:
        case DbType.UInt32:
        case DbType.UInt64:
        case DbType.SByte:
            typeName = "Integer";
            break;
        case DbType.String:
            typeName = "String";
            break;
        case DbType.DateTime:
        case DbType.Date:
            typeName = "Date";
            break;
        case DbType.Decimal:
            typeName = "BigDecimal";
            break;
    }
    return typeName;
}
</script>
package <%=NameSpace%>.persistence.entity;

import com.baomidou.mybatisplus.annotations.TableField;
import com.baomidou.mybatisplus.annotations.TableId;
import com.baomidou.mybatisplus.annotations.TableName;
import com.baomidou.mybatisplus.enums.IdType;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.io.Serializable;
import java.util.Date;
import java.math.BigDecimal;

/**
* <%=Table.Description %>
* @author: codesmith
**/
@Data
@EqualsAndHashCode(callSuper = false)
@TableName("<%=Table.Name.TrimEnd('0','_')%>")
public class <%=ConvertTableCamel(Table.Name)%> implements Serializable {
    <% for (int i = 0; i < Table.Columns.Count;i++) {%>
    /**
    * <%=Table.Columns[i].Description%>
    **/
        <%if (Table.Columns[i].IsPrimaryKeyMember) {%>
    @TableId(value = "<%=Table.Columns[i].Name%>", type = IdType.AUTO)
        <%} else {%>
    @TableField("<%=Table.Columns[i].Name%>")
        <%} %>
    private <%=ConvertColumnType(Table.Columns[i].DataType) %> <%=ConvertColumnCamel(Table.Columns[i].Name) %>;
    <%} %>
    
    <% for (int i = 0; i < Table.Columns.Count;i++) {%>
    public static final String <%=Table.Columns[i].Name.ToUpper() %> = "<%=Table.Columns[i].Name%>";
    <%} %>
}